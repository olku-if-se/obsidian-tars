# Mise configuration - Task orchestrator for Obsidian Tars plugin
# See: https://mise.jdx.dev/tasks/

# ============================================================================
# Settings - SOPS for Encrypted Secrets
# ============================================================================

[settings]
experimental = true
verbose = false                             # enable if SOPS is failing or you need more debug details
sops.age_key_file = "{{config_root}}/.secrets/mise-age.txt"  # Absolute path from config root
sops.rops = false                           # use original SOPS binary not a rops library
sops.strict = false                         # if age key is not provided do not raise an ERROR

# ============================================================================
# Environment Variables
# ============================================================================

[[env]]
#OLLAMA_URL = "http://localhost:11434"
OLLAMA_URL = "http://192.168.1.228:11434"
OLLAMA_MODEL = "llama3.2:latest"

# SOPS age key configuration (absolute path from config root)
MISE_SOPS_AGE_KEY_FILE = "{{config_root}}/.secrets/mise-age.txt"
SOPS_AGE_KEY_FILE = "{{env.MISE_SOPS_AGE_KEY_FILE}}"

[[env]]
# Load encrypted secrets (from root directory where mise.toml is located)
_.file = ["{{config_root}}/.env.secrets.json", "{{config_root}}/.env"]

# ============================================================================
# Quick Commands (Most Common)
# ============================================================================

[tasks.test]
description = "🧪 Complete test workflow: build → vault → launch Obsidian"
run = "packages/plugin/scripts/test-workflow.sh"

[tasks.dev]
description = "👨‍💻 Start development mode (watch for changes)"
run = "pnpm --filter obsidian-tars dev"

[tasks.build]
description = "📦 Build plugin for production"
run = "pnpm --filter obsidian-tars build"

# ============================================================================
# Individual Step Commands
# ============================================================================

[tasks.build-only]
description = "Build without setting up vault"
run = "pnpm --filter obsidian-tars build"

[tasks.setup-vault]
description = "Setup test vault (requires build first)"
run = "packages/plugin/scripts/setup-test-vault.sh"

[tasks.launch]
description = "Launch Obsidian with test vault"
run = "packages/plugin/scripts/launch-obsidian.sh"

# ============================================================================
# Development Workflow
# ============================================================================

[tasks.dev-setup]
description = "Setup development environment with symlinked vault"
run = """
#!/bin/bash
set -e

# Determine vault path based on OS
if [[ -f /proc/version ]] && grep -qi microsoft /proc/version; then
  WIN_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
  VAULT_DIR="/mnt/c/Users/$WIN_USER/obsidian-test-vault"
else
  VAULT_DIR="$HOME/obsidian-test-vault"
fi

PLUGIN_DIR="$VAULT_DIR/.obsidian/plugins"
PROJECT_DIR="$(pwd)/packages/plugin"

mkdir -p "$PLUGIN_DIR"
rm -rf "$PLUGIN_DIR/obsidian-tars"
ln -s "$PROJECT_DIR" "$PLUGIN_DIR/obsidian-tars"

echo "✅ Symlinked vault ready at: $VAULT_DIR"
echo "💡 Run 'mise dev' and toggle plugin in Obsidian to reload"
"""

[tasks.clean]
description = "Remove test vault and build artifacts"
run = """
#!/bin/bash
# Determine vault path based on OS
if [[ -f /proc/version ]] && grep -qi microsoft /proc/version; then
  WIN_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
  VAULT_DIR="/mnt/c/Users/$WIN_USER/obsidian-test-vault"
else
  VAULT_DIR="$HOME/obsidian-test-vault"
fi

rm -rf "$VAULT_DIR" dist/
echo "✅ Cleaned vault and dist/"
"""

# ============================================================================
# Quality Checks
# ============================================================================

[tasks.lint]
description = "Run Biome lint"
run = "pnpm lint"

[tasks.format]
description = "Format code with Biome"
run = "pnpm format"

[tasks.check]
description = "Run all checks (lint + format + tests)"
run = """
#!/bin/bash
set -e
echo "🔍 Running Biome check..."
pnpm check
echo "✅ Check passed"
echo ""
echo "🧪 Running tests..."
pnpm test
echo "✅ Tests passed"
"""

# ============================================================================
# Docker & MCP Tools
# ============================================================================

[tasks.docker-status]
description = "Check Docker containers status"
run = """
#!/bin/bash
if command -v docker &> /dev/null && docker ps &> /dev/null; then
  echo "✅ Docker is running"
  echo ""
  echo "MCP Containers:"
  docker ps --filter 'name=tars-mcp' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' || echo "No MCP containers running"
else
  echo "❌ Docker not running or not installed"
fi
"""

[tasks.docker-logs]
description = "View MCP container logs"
run = """
#!/bin/bash
CONTAINER=$(docker ps --filter 'name=tars-mcp' --format '{{.Names}}' | head -1)
if [[ -n "$CONTAINER" ]]; then
  docker logs "$CONTAINER" --tail 50 --follow
else
  echo "❌ No MCP containers found (tars-mcp*)"
fi
"""

[tasks.docker-stop]
description = "Stop all MCP containers"
run = """
#!/bin/bash
docker ps --filter 'name=tars-mcp' --format '{{.Names}}' | xargs -r docker stop
echo "✅ Stopped all tars-mcp* containers"
"""

# ============================================================================
# E2E Tests
# ============================================================================

[tasks.test-e2e]
description = "🔬 Run E2E tests (requires API keys in .env.secrets.json)"
run = "bash scripts/test-e2e.sh"

[tasks.secrets-init]
description = "🔐 Initialize SOPS encrypted secrets"
run = """
#!/bin/bash
set -e

echo "🔐 Setting up SOPS encrypted secrets..."
echo ""

# Create .secrets directory
mkdir -p .secrets

# Generate age key if it doesn't exist
if [[ ! -f .secrets/mise-age.txt ]]; then
  echo "📝 Generating new age key..."
  age-keygen -o .secrets/mise-age.txt
  echo "✅ Age key generated: .secrets/mise-age.txt"
  echo ""
  echo "⚠️  IMPORTANT: Backup this key file! You won't be able to decrypt secrets without it."
  echo ""
else
  echo "✅ Age key already exists: .secrets/mise-age.txt"
  echo ""
fi

# Extract public key
PUBLIC_KEY=$(grep "# public key:" .secrets/mise-age.txt | cut -d: -f2 | xargs)
echo "📋 Your public key: $PUBLIC_KEY"
echo ""

# Create template secrets file if it doesn't exist
if [[ ! -f .env.secrets.json ]]; then
  echo "📝 Creating encrypted secrets template..."
  
  # Create unencrypted template
  cat > .env.secrets.json.tmp <<EOF
{
  "OPENAI_API_KEY": "sk-proj-REPLACE_WITH_YOUR_KEY",
  "ANTHROPIC_API_KEY": "sk-ant-REPLACE_WITH_YOUR_KEY",
  "GROK_API_KEY": "xai-REPLACE_WITH_YOUR_KEY"
}
EOF

  # Encrypt it with SOPS
  sops --encrypt --age "$PUBLIC_KEY" .env.secrets.json.tmp > .env.secrets.json
  rm .env.secrets.json.tmp
  
  echo "✅ Created encrypted .env.secrets.json"
  echo ""
  echo "📝 Next steps:"
  echo "   1. Edit secrets: mise run secrets-edit"
  echo "   2. Add your API keys"
  echo "   3. Save and exit"
  echo ""
else
  echo "✅ Encrypted secrets file already exists: .env.secrets.json"
  echo ""
fi

echo "🎉 SOPS setup complete!"
echo ""
echo "Available commands:"
echo "   mise run secrets-edit   - Edit encrypted secrets"
echo "   mise run secrets-show   - View decrypted secrets"
echo "   mise run test-e2e       - Run E2E tests with secrets"
"""

[tasks.secrets-edit]
description = "✏️  Edit encrypted secrets"
run = "sops .env.secrets.json"

[tasks.secrets-show]
description = "👁️  Show decrypted secrets (be careful!)"
run = "sops --decrypt .env.secrets.json"

[tasks.secrets-rotate]
description = "🔄 Rotate a single API key (usage: mise run secrets-rotate KEY_NAME new-value)"
run = "bash scripts/secrets-rotate.sh"

# ============================================================================
# Tools
# ============================================================================

[tools]
node = "22.20.0" # Node 22 LTS (Iron)
#node = "24.10.0"  # Node 24 LTS (Kinetic)
pnpm = "10.18.2"
age = "latest"   # Encryption tool for SOPS
sops = "latest"  # Secret encryption/decryption
